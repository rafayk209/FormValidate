{"version":3,"sources":["Form.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["validationSchema","yup","FullName","required","Email","email","Password","min","max","CPassword","oneOf","Contact","typeError","integer","Form","formik","useFormik","initialValues","onSubmit","values","alert","JSON","stringify","className","handleSubmit","TextField","name","type","id","label","variant","value","onChange","handleChange","error","touched","Boolean","errors","helperText","Button","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAKMA,EAAmBC,IAAW,CAClCC,SAAUD,IACA,oBACPE,SAAS,sBACZC,MAAOH,IACG,oBACPI,MAAM,uBACNF,SAAS,qBACZG,SAAUL,IACA,uBACPM,IAAI,EAAG,qDACPC,IAAI,GAAI,mBACRL,SAAS,wBACZM,UAAWR,MACRS,MAAM,CAACT,IAAQ,YAAa,MAAO,wBACtCU,QAASV,MACNW,UAAU,yCACVC,QAAQ,gDACRV,SAAS,gCAoFCW,MAhFf,WAEE,IAAMC,EAASC,YAAU,CAEvBhB,iBAAkBA,EAGlBiB,cAAe,CACbf,SAAU,GACVE,MAAO,GACPE,SAAU,GACVG,UAAW,GACXE,QAAS,IAGXO,SAAU,SAAAC,GACRC,MAAMC,KAAKC,UAAUH,EAAQ,KAAM,OAMvC,OACE,gCACE,mDACA,qBAAKI,UAAU,MAAf,SACE,qBAAKA,UAAU,0BAAf,SAGE,uBAAML,SAAUH,EAAOS,aAAvB,UACE,cAACC,EAAA,EAAD,CAAWC,KAAK,WAAWC,KAAK,OAAOJ,UAAU,aAAaK,GAAG,iBAAiBC,MAAM,YAAYC,QAAQ,WAE9GC,MAAOhB,EAAOI,OAAOjB,SACrB8B,SAAUjB,EAAOkB,aAEjBC,MAAOnB,EAAOoB,QAAQjC,UAAYkC,QAAQrB,EAAOsB,OAAOnC,UACxDoC,WAAYvB,EAAOoB,QAAQjC,UAAYa,EAAOsB,OAAOnC,WAEnD,cAACuB,EAAA,EAAD,CAAWC,KAAK,QAAQC,KAAK,QAAQJ,UAAU,aAAaK,GAAG,iBAAiBC,MAAM,QAAQC,QAAQ,WAExGC,MAAOhB,EAAOI,OAAOf,MACrB4B,SAAUjB,EAAOkB,aAEjBC,MAAOnB,EAAOoB,QAAQ/B,OAASgC,QAAQrB,EAAOsB,OAAOjC,OACrDkC,WAAYvB,EAAOoB,QAAQ/B,OAASW,EAAOsB,OAAOjC,QAEhD,cAACqB,EAAA,EAAD,CAAWC,KAAK,WAAWC,KAAK,WAAWJ,UAAU,aAAaK,GAAG,iBAAiBC,MAAM,WAAWC,QAAQ,WAEjHC,MAAOhB,EAAOI,OAAOb,SACrB0B,SAAUjB,EAAOkB,aAEjBC,MAAOnB,EAAOoB,QAAQ7B,UAAY8B,QAAQrB,EAAOsB,OAAO/B,UACxDgC,WAAYvB,EAAOoB,QAAQ7B,UAAYS,EAAOsB,OAAO/B,WAEnD,cAACmB,EAAA,EAAD,CAAWC,KAAK,YAAYC,KAAK,WAAWJ,UAAU,aAAaK,GAAG,iBAAiBC,MAAM,mBAAmBC,QAAQ,WAE1HC,MAAOhB,EAAOI,OAAOV,UACrBuB,SAAUjB,EAAOkB,aAEjBC,MAAOnB,EAAOoB,QAAQ1B,WAAa2B,QAAQrB,EAAOsB,OAAO5B,WACzD6B,WAAYvB,EAAOoB,QAAQ1B,WAAaM,EAAOsB,OAAO5B,YAEpD,cAACgB,EAAA,EAAD,CAAWC,KAAK,UAAUC,KAAK,SAASJ,UAAU,aAAaK,GAAG,iBAAiBC,MAAM,cAAcC,QAAQ,WAEjHC,MAAOhB,EAAOI,OAAOR,QACrBqB,SAAUjB,EAAOkB,aAEjBC,MAAOnB,EAAOoB,QAAQxB,SAAWyB,QAAQrB,EAAOsB,OAAO1B,SACvD2B,WAAYvB,EAAOoB,QAAQxB,SAAWI,EAAOsB,OAAO1B,UAElD,cAAC4B,EAAA,EAAD,CAAQZ,KAAK,SAASJ,UAAU,aAAaO,QAAQ,WAArD,+B,cCpFGU,MARf,WACE,OACE,qBAAKjB,UAAU,MAAf,SACE,cAAC,EAAD,OCISkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d8d6182a.chunk.js","sourcesContent":["import TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport * as yup from 'yup';\r\nimport { useFormik } from \"formik\";\r\n\r\nconst validationSchema = yup.object({\r\n  FullName: yup\r\n    .string('Enter your email')\r\n    .required('Full Name required'),\r\n  Email: yup\r\n    .string('Enter your email')\r\n    .email('Enter a valid email')\r\n    .required('Email is required'),\r\n  Password: yup\r\n    .string('Enter your password')\r\n    .min(8, 'Password should be of minimum 8 characters length')\r\n    .max(10, 'No more then 10')\r\n    .required('Password is required'),\r\n  CPassword: yup.string()\r\n    .oneOf([yup.ref('Password'), null], 'Passwords must match'),\r\n  Contact: yup.number()\r\n    .typeError(\"That doesn't look like a phone number\")\r\n    .integer(\"A phone number can't include a decimal point\")\r\n    .required('A phone number is required'),\r\n});\r\n\r\n\r\nfunction Form() {\r\n \r\n  const formik = useFormik({\r\n    \r\n    validationSchema: validationSchema,\r\n    \r\n\r\n    initialValues: {\r\n      FullName: \"\",\r\n      Email: \"\",\r\n      Password: \"\",\r\n      CPassword: \"\",\r\n      Contact: \"\",\r\n    },\r\n\r\n    onSubmit: values => {\r\n      alert(JSON.stringify(values, null, 2));\r\n    },\r\n  });\r\n  \r\n\r\n\r\n  return (\r\n    <div>\r\n      <h1>Registration Form</h1>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6 col-10 mx-auto\" >\r\n\r\n\r\n          <form onSubmit={formik.handleSubmit} >\r\n            <TextField name=\"FullName\" type=\"text\" className=\"w-100 mt-5\" id=\"standard-basic\" label=\"Full Name\" variant=\"standard\" \r\n            \r\n          value={formik.values.FullName}\r\n          onChange={formik.handleChange}\r\n\r\n          error={formik.touched.FullName && Boolean(formik.errors.FullName)}\r\n          helperText={formik.touched.FullName && formik.errors.FullName}\r\n/>\r\n            <TextField name=\"Email\" type=\"email\" className=\"w-100 mt-5\" id=\"standard-basic\" label=\"Email\" variant=\"standard\" \r\n            \r\n          value={formik.values.Email}\r\n          onChange={formik.handleChange}\r\n\r\n          error={formik.touched.Email && Boolean(formik.errors.Email)}\r\n          helperText={formik.touched.Email && formik.errors.Email}\r\n/>\r\n            <TextField name=\"Password\" type=\"password\" className=\"w-100 mt-5\" id=\"standard-basic\" label=\"Password\" variant=\"standard\" \r\n            \r\n          value={formik.values.Password}\r\n          onChange={formik.handleChange}\r\n\r\n          error={formik.touched.Password && Boolean(formik.errors.Password)}\r\n          helperText={formik.touched.Password && formik.errors.Password}\r\n/>\r\n            <TextField name=\"CPassword\" type=\"password\" className=\"w-100 mt-5\" id=\"standard-basic\" label=\"Confirm Password\" variant=\"standard\" \r\n            \r\n          value={formik.values.CPassword}\r\n          onChange={formik.handleChange}\r\n\r\n          error={formik.touched.CPassword && Boolean(formik.errors.CPassword)}\r\n          helperText={formik.touched.CPassword && formik.errors.CPassword}\r\n/>\r\n            <TextField name=\"Contact\" type=\"number\" className=\"w-100 mt-5\" id=\"standard-basic\" label=\"Contact No.\" variant=\"standard\" \r\n            \r\n          value={formik.values.Contact}\r\n          onChange={formik.handleChange}\r\n\r\n          error={formik.touched.Contact && Boolean(formik.errors.Contact)}\r\n          helperText={formik.touched.Contact && formik.errors.Contact}\r\n/>\r\n            <Button type=\"submit\" className=\"w-25  mt-5\" variant=\"outlined\">Signup</Button>\r\n          </form>\r\n        \r\n      </div>\r\n    </div>\r\n\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import Form from \"./Form\"\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}